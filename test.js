const _ = require('lodash')
const postcss = require('postcss')
const tailwindcss = require('tailwindcss')
const plugin = require('./index.js')

const spacing = {
  missing: ['.max-w-10px', '.min-h-10px', '.min-w-10px'],
  results: [
    '.-bottom-10px',
    '.-inset-10px',
    '.-inset-x-10px',
    '.-inset-y-10px',
    '.-left-10px',
    '.-m-10px',
    '.-mb-10px',
    '.-ml-10px',
    '.-mr-10px',
    '.-mt-10px',
    '.-mx-10px',
    '.-my-10px',
    '.-right-10px',
    '.-space-x-10px',
    '.-space-y-10px',
    '.-top-10px',
    '.-translate-x-10px',
    '.-translate-y-10px',
    '.bottom-10px',
    '.gap-10px',
    '.gap-x-10px',
    '.gap-y-10px',
    '.h-10px',
    '.inset-10px',
    '.inset-x-10px',
    '.inset-y-10px',
    '.left-10px',
    '.m-10px',
    '.max-h-10px',
    '.mb-10px',
    '.ml-10px',
    '.mr-10px',
    '.mt-10px',
    '.mx-10px',
    '.my-10px',
    '.p-10px',
    '.pb-10px',
    '.pl-10px',
    '.pr-10px',
    '.pt-10px',
    '.px-10px',
    '.py-10px',
    '.right-10px',
    '.space-x-10px',
    '.space-y-10px',
    '.top-10px',
    '.translate-x-10px',
    '.translate-y-10px',
    '.w-10px',
  ],
}

/**
 * generatePluginCss
 * Handles generating base tailwind css
 * @param {*} config
 * @param {object} pluginOptions are the options passed to the plugin
 * @return
 */
const generatePluginCss = (config, pluginOptions = {}) => {
  const list = []
  const keys = Object.keys(pluginOptions)
  const count = keys.length

  if (count > 0) {
    list.push(plugin(pluginOptions))
  }
  return postcss(
    tailwindcss(
      _.merge(
        {
          theme: {},
          variants: [],
          plugins: list,
        },
        config
      )
    )
  )
    .process('@tailwind components; @tailwind utilities', {
      from: undefined,
    })
    .then((result) => {
      // console.log('results', result.css)
      return result.css
    })
}

test('900 values (+1) are generated by default... [ width ]', () => {
  return generatePluginCss({}, { width: {} }).then((css) => {
    const list = css.match(/\.w-[0-9][0-9]*px/g)

    expect(list).toEqual(expect.arrayContaining(['.w-0px', '.w-900px']))
    expect(list.length).toEqual(901)
  })
})

test('900 values (+1) are generated by default... [ height ]', () => {
  return generatePluginCss({}, { height: {} }).then((css) => {
    const list = css.match(/\.h-[0-9][0-9]*px/g)

    expect(list).toEqual(expect.arrayContaining(['.h-0px', '.h-900px']))
    expect(list.length).toEqual(901)
  })
})

// Note: If the results contain a backslash, add another to escape it.
test('A single value (+1) can be added... [ width ]', () => {
  return generatePluginCss(
    {},
    {
      width: {
        stop: 1,
      },
    }
  ).then((css) => {
    const list = css.match(/\.w-[01]px/g)
    const results = ['.w-0px', '.w-1px']

    expect(list).toEqual(results)
  })
})

test('A range of values can be added... [ width ]', () => {
  return generatePluginCss(
    {},
    {
      width: {
        stop: 40,
        start: 30,
      },
    }
  ).then((css) => {
    const list = css.match(/\.w-[34][0-9]px/g)
    const results = ['.w-30px', '.w-31px', '.w-40px']

    expect(list).toEqual(expect.arrayContaining(results))
    expect(list.length).toEqual(11)
  })
})

test('A single value can be added... [ width ]', () => {
  return generatePluginCss(
    {},
    {
      width: {
        stop: 40,
        start: 40,
      },
    }
  ).then((css) => {
    const list = css.match(/\.w-[34][0-9]px/g)
    const results = ['.w-40px']

    expect(list).toEqual(results)
    expect(list.length).toEqual(1)
  })
})

test('Supports the old option properties... [ width ]', () => {
  return generatePluginCss(
    {},
    {
      width: {
        total: 40,
        startingValue: 30,
      },
    }
  ).then((css) => {
    const list = css.match(/\.w-[34][0-9]px/g)
    const results = ['.w-30px', '.w-31px', '.w-40px']

    expect(list).toEqual(expect.arrayContaining(results))
    expect(list.length).toEqual(11)
  })
})

test('Multiple values can be added... [ spacing ]', () => {
  return generatePluginCss(
    {},
    {
      spacing: {
        stop: 10,
      },
    }
  ).then((css) => {
    const list = css.match(/\..*-*.*-*.*-10px/g)
    const results = [...spacing.results]
    // NOTE:  it's ODD that only .max-h-10px gets generated
    //        (no other min / max values)
    expect(list).toEqual(expect.arrayContaining(results))
    expect(list.length).toEqual(results.length)
  })
})

test('Multiple values can be added... [ spacing + max/min ]', () => {
  return generatePluginCss(
    {},
    {
      spacing: {
        stop: 10,
      },
      maxWidth: {
        stop: 10,
      },
      minWidth: {
        stop: 10,
      },
      minHeight: {
        stop: 10,
      },
    }
  ).then((css) => {
    const list = css.match(/\..*-*.*-*.*-10px/g)
    const results = [...spacing.results, ...spacing.missing]

    expect(list).toEqual(expect.arrayContaining(results))
    expect(list.length).toEqual(results.length)
  })
})

test('Multiple values can be added... [ maxWidth ]', () => {
  return generatePluginCss(
    {},
    {
      maxWidth: {
        stop: 10,
      },
    }
  ).then((css) => {
    const list = css.match(/\.max-w-[0-9][0-9]*px/g)
    const results = ['.max-w-0px', '.max-w-10px']

    expect(list).toEqual(expect.arrayContaining(results))
    expect(list.length).toEqual(11)
  })
})

test('Multiple values can be added... [ fontSize ]', () => {
  return generatePluginCss(
    {},
    {
      fontSize: {
        stop: 10,
      },
    }
  ).then((css) => {
    const list = css.match(/\.text-[0-9][0-9]*px/g)
    const results = ['.text-0px', '.text-10px']

    expect(list).toEqual(expect.arrayContaining(results))
    expect(list.length).toEqual(11)
  })
})

test('Multiple values can be added... [ lineHeight ]', () => {
  return generatePluginCss(
    {},
    {
      lineHeight: {
        stop: 10,
      },
    }
  ).then((css) => {
    const list = css.match(/\.leading-[0-9][0-9]*px/g)
    const results = ['.leading-0px', '.leading-10px']

    expect(list).toEqual(expect.arrayContaining(results))
    expect(list.length).toEqual(11)
  })
})
